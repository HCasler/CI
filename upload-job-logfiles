#!/usr/bin/env python
"""
Upload logfiles to Gist
"""

from os.path import expanduser, dirname, abspath, join, exists
from sys import exit
import re, sys, os
from socket import setdefaulttimeout
setdefaulttimeout(120)

import json
import requests

def prepare_file(filename):
  contents_text=''
  with open(filename, 'r') as f:
    contents_text = f.read()
  path, tail = os.path.split(filename)
  
  print ("Prepared file: %s" % tail, file=sys.stderr)
  
  return tail, contents_text

# pull out basic jenkins environment info
REPOSITORY = os.environ['REPOSITORY']
PR_NUMBER = os.environ['PULL_REQUEST']
PR_REV = os.environ['COMMIT_SHA']
MASTER_REV = os.environ['MASTER_COMMIT_SHA']

# all arguments point to logfiles to be uploaded, in argument order

files_to_upload = {}
for filename in sys.argv[1:]:
  gist_fn, content = prepare_file(filename)
  files_to_upload[gist_fn] = {'content': content}

fmt = (REPOSITORY, PR_NUMBER, PR_REV, MASTER_REV)

# https://docs.github.com/en/rest/reference/gists#create-a-gist
headers = {'Accept': 'application/vnd.github.v3+json',
          'Authorization': 'token %s' % os.environ['GITHUBTOKEN']
}

data = {
  'description': '%s CI artefacts for PR #%s. PR revision %s was merged at master revision %s.' % fmt,
  'files': files_to_upload,
  'public': True
}

r = requests.post('https://api.github.com/gists', 
              headers = headers,
              data = json.dumps(data))

response_json = r.json()

print(response_json, file=sys.stderr)

# print gist link
if 'html_url' in response_json:
  print (response_json['html_url'])
else:
  sys.exit(1)
